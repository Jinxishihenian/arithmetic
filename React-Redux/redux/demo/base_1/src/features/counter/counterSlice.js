import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount } from './counterAPI';

const initialState = {
    value: 0,
    status: 'idle',
    auth: {
        increment: true,
        decrement: true,
    },
};

// The function below is called a thunk and allows us to perform async-await logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. async-await
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async-await requests.
export const incrementAsync = createAsyncThunk(
    'counter/fetchCount',
    async (amount) => {
        const response = await fetchCount(amount);
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const counterSlice = createSlice({
    name: 'counter',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        increment: (state) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.value += 1;
        },
        decrement: (state) => {
            state.value -= 1;
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        incrementByAmount: (state, action) => {
            const { value } = action.payload || {}
            state.value += value;
        },
    },
    // The `extraReducers` field lets the slice.js handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(incrementAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(incrementAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value += action.payload;
            });
    },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice.js file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async-await logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
        dispatch(incrementByAmount(amount));
    }
};

// Thunk校验权限.
export const checkPermission = () => async (dispatch, getState) => {
    const { counter } = getState();
    const { auth } = counter || {}
    // alert(`我是否包含该权限:${JSON.stringify(auth.increment)}`)
    // console.log(`使用thunk判断,我是否包含该权限:${JSON.stringify(auth.increment)}`)
    if (!auth) {
        // TODO something.
    }
    // 实际项目中代码的使用场景.
    /*const state = getState(); // 获取store中的state
    const { user } = state.auth; // 假设我们的用户信息存储在auth slice的user字段中
    const hasPermission = await checkUserPermission(user.id); // 调用API校验用户权限
    if (!hasPermission) {
        dispatch(push('/login')); // 如果没有权限，则跳转到登录页
    }*/
}

export default counterSlice.reducer;
