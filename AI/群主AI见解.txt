看到群里大家有在讨论 AI 编程这件事，给大家分享一下我的看法

之前在技术论坛看到一个帖子，就不说原帖了，大概的意思给大家说下，一个非编程网友用AI零代码3天做了一款排班APP，宣称程序员即将失业，评论区两极分化，点
赞最高的2个评论里，1个是“这才是未来”，另一个是“你试试用AI加个RBAC”。

其实我之前一直想录一个视频，稿子写完了，视频名字都是起好了叫《AI 给了很多人可笑的信心》，没有录是因为估计会被怼，因为稿子内容比当下看到的这个帖子内
容还要犀利一些，之所以写这篇稿子，是因为随着 AI Coding 的兴起，非编程人员和编程人员呈现两种不太一样的两极分化，很多人其实过分乐观了，当然我知道这
可能是因为国内 AI 媒体营销风气的原因，但我们已经在接触 AI 编程的人一定要客观。

非编程人员里绝大多数人觉得 AI 这么强大，编程变得没有了壁垒，一切都是那么 easy，旧编程人员的作用在哪里，认为 AI 很容易取代编程人员。编程人员里也有
一部分人是这样的看法。

真的是这样吗？显然并不是，因为当下的 AI 并没有大多数人认为的那么强大，所谓的零代码 AI Coding，目前只能开发一些简单的程序，复杂度一上来，就会有种
种问题（注意是非编程人员零代码开发），而现代我们常常使用的一些软件产品的复杂度都非常高，零代码 AI Coding 写一个好的复杂度中等的产品都非常困难，有
的人可能会反驳说谁谁谁用 AI 零代码写出了优秀的产品，但是其实观察会发现，这些产品都太简单了，简单到不需要后端服务以及数据存储，我们暂且把他们归类为
为简单工具项目，这类产品 AI 当然是可以零代码完成的，但是这类产品有很大的价值吗，站在产品角度可能是有的，因为一个想法的落地只要能够解决一些痛点就是
好产品，但其实一个好产品的衡量没有那么简单，我们还要考虑产品壁垒，而简单的产品复刻成本太低。有人会说任何一个产品都是由简单到复杂，这是有一个过程的，
一个好产品的开端都是一个简单产品经过不断迭代显现产品价值以及不可替代性，但是基于 AI Coding 的产品最大的痛点是难以迭代，因为大模型考虑的是人们描述
的需求实现，而不是从上层全盘考虑产品的种种问题，诸如设计、交互之类暂且不谈，软件产品的架构安全性以及可迭代性谁来保证，不懂底层逻辑的你我他吗？我们做
一个好的产品肯定不只是一锤子买卖，一些特殊场景比如用户数据隔离、支付、并发等等等等，这都不是一个不懂底层逻辑的人可以零代码仅通过描述就可以让 AI 开
发的，仅仅是描述对非编程人员就已经很困难了。

说这些并不是因为顽固派的想法，恰恰相反我是非常看好也积极拥抱 AI 的人，只是想让大家认清这个现实，不要轻易的说出 AI 可以替代编程人员，会显得很外行，
因为即使 AI 可以很好的辅助开发工作，它依然需要编程人员为整体的架构控制方向以及及时矫正一些不符合情境的代码，我想不会有正经的产品开发团队愿意招聘不
懂代码只会 AI 的同学，因为底层视角不同。

当然如果编程同学以此觉得自己稳坐泰山了，也是不对的，AI Coding 确实压榨了一些旧的中下层开发人员的生存空间，为什么是旧的，因为新的中下层开发同学同
样会学会使用 AI Coding，上层开发影响并不会很大，因为架构视野和情境经验，架构视野不多阐述，情境是什么，这是我个人觉得比较贴合的词汇，代指在某种情
况或某个场景下有大量落地经验，这些经验不仅仅是产品模块的开发，还有很多开发之外的东西。

AI 带来的是新一轮的“技术平权”，它给了闷头卷技术的人一榔头，同时给了外行想要入局的人一座枣山。这是谁问我我都会讲的一句话。

对于编程人员，在这个革新的过程中，编程人员们无需再干一些 ”脏活累活“，但是却需要从更高层面去审视和优化系统整体架构，所以沟通能力和架构能力变得尤为重要。

对绝大多数非编程人员来说，AI Coding最大的价值是让想法快速落地，虽然AI Coding有种种问题，但是这并不妨碍我们可以通过 AI Coding 辅助去做一些事情
、把一些灵机一动的想法快速落地，当然这个前提真的会用 AI Coding，最终哪怕开发的不好，哪怕不够完善，只要可以落地，这些所谓的想法就可以快速得到验证，
验证成功之后是放弃做下一个灵机一动的点、或继续 AI 迭代、再或者找专业开发人员去设计让产品变得更“好”这些都是后话了，不是吗。

或许真正的技术平权，不在于让所有人都能“写代码”，而在于让代码回归其本质——它从来不是目的，只是实现价值的工具罢了。AI 打破了语法门槛我们反而更能清晰地
看到，那些关于系统设计的思考、用户体验的洞察、商业逻辑的把握，或许才是未来数字AI时代的通行证。

